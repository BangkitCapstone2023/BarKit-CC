steps:
  # Retrieve the cloud-storage-credential secret
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret="cloud-storage-credential" --format='get(payload.data)' | base64 -d > app/config/cloudStorageKey2.json

  # Retrieve the firebase-config secret
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret="firebase-config" --format='get(payload.data)' | base64 -d > app/config/firebaseClientConfig2.json

  # Retrieve the firebase-admin secret
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret="firebase-admin" --format='get(payload.data)' | base64 -d > app/config/firebaseAccountKey2.json

  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'asia-southeast2-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_IMAGE_NAME}:${SHORT_SHA}', '.']
    id: 'Building the container image'

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'asia-southeast2-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_IMAGE_NAME}:${SHORT_SHA}']
    id: 'Pushing the image to registry'

  # Deploy container image to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud' 
    args: ['run', 'deploy', '${_IMAGE_NAME}', '--image', 'asia-southeast2-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_IMAGE_NAME}:${SHORT_SHA}', '--region', 'asia-southeast2', '--platform', 'managed', "--allow-unauthenticated", '--tag', 'latest', '--allow-unauthenticated']
